import React from 'react';
import 'antd/dist/antd.css';
import {Typography} from 'antd';

const {Paragraph} = Typography;

export default class Criteria extends React.Component {
    render() {
        return (
            <Typography>
                <Paragraph style={{fontSize: 20}}>
                    JPQL запросы штука весьма удобная, почти такая же, как и SQL, только с классами и атрибутами. Но, как и у всякой удобной вещи, у неё есть недостатки, даже два:
                    <ul>
                        <li>Запросы жёстко определяются на стадии компиляции и во время исполнения их не изменить.</li>
                        <li>Запросы совсем никак не связаны с реальными сущностями и если сущность изменяется, то никто не скажет, что запрос больше неверен. До тех пор, пока его не попытаются выполнить.</li>
                    </ul>
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Примером запросов, создаваемых программно, может служить любой фильтр в любом приложении, который позволяет фильтровать данные по нескольким полям. Если рассматривать модель данных из примера с отношениями между сущностями, то можно представить себе фильтр людей по:
                    <ul>
                        <li>Серии и номеру паспорта</li>
                        <li>Адресу проживания</li>
                        <li>Месту работы</li>
                        <li>Имени</li>
                    </ul>
                    Причём фильтроваться люди могут по любой комбинации этих полей, например по адресу проживания и месту работы или по имени и адресу проживания. В терминах JPQL и SQL выразить такой запрос невозможно, потому что нет оператора «выбрать, у которых поле равно такому-то значению или игнорировать условие, если значение не установлено».
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Вариантов реализации такого фильтра несколько. Можно сделать 16 различных запросов и в зависимости от того, какие значения фильтра установлены, выбирать подходящий запрос.
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Наконец третий и наиболее правильный вариант, это использование программно определяемых запросов и JPA Criteria API.
                </Paragraph>
            </Typography>)
    }
}