import React from 'react';
import 'antd/dist/antd.css';
import {Typography, Image} from 'antd';
import exceptions from "./exceptions.png";

const {Paragraph, Text, Title} = Typography;

export default class Exceptions extends React.Component {
    render() {
        return (
            <Typography>
                <Title>Дайте определение понятию “исключение”</Title>
                <Paragraph style={{fontSize: 20}}>
                    <Text strong>Исключение</Text> – это проблема(ошибка) возникающая во время выполнения программы. Исключения могут возникать во многих случаях, например:
                    <ul>
                        <li>Пользователь ввел некорректные данные</li>
                        <li>Файл, к которому обращается программа, не найден</li>
                        <li>Сетевое соединение с сервером было утеряно во время передачи данных. И т.д.</li>
                    </ul>
                    Все исключения в Java являются объектами. Поэтому они могут порождаться не только автоматически при возникновении исключительной ситуации, но и создаваться самим разработчиком.
                </Paragraph>
                <Title>Какова иерархия исключений</Title>
                <Image src={exceptions}/>
                <Paragraph style={{fontSize: 20}}>
                    Исключения делятся на несколько классов, но все они имеют общего предка — класс Throwable. Его потомками являются подклассы Exception и Error.
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Исключения (Exceptions) являются результатом проблем в программе, которые в принципе решаемые и предсказуемые. Например, произошло деление на ноль в целых числах.
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Ошибки (Errors) представляют собой более серьёзные проблемы, которые, согласно спецификации Java, не следует пытаться обрабатывать в собственной программе, поскольку они связаны с проблемами уровня JVM. Например, исключения такого рода возникают, если закончилась память, доступная виртуальной машине. Программа дополнительную память всё равно не сможет обеспечить для JVM.
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    В Java все исключения делятся на два типа: контролируемые исключения (checked) и неконтролируемые исключения (unchecked), к которым относятся ошибки (Errors) и исключения времени выполнения (RuntimeExceptions, потомок класса Exception).
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Контролируемые исключения представляют собой ошибки, которые можно и нужно обрабатывать в программе, к этому типу относятся все потомки класса Exception (но не RuntimeException).
                </Paragraph>
            </Typography>)
    }
}