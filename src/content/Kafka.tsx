import React from 'react';
import 'antd/dist/antd.css';
import {Typography} from 'antd';
import SyntaxHighlighter from "react-syntax-highlighter";
import {darcula} from "react-syntax-highlighter/dist/esm/styles/hljs";

const {Paragraph, Text} = Typography;

export default class Kafka extends React.Component {
    render() {
        return (
            <Typography>
                <Paragraph style={{fontSize: 20}}>
                    Apache Kafka является брокером сообщений. С его помощью микросервисы могут взаимодействовать друг с другом, посылая и получая важную информацию. Возникает вопрос, почему не использовать для этих целей обычный POST – reqest, в теле которого можно передать нужные данные и таким же образом получить ответ? У такого подхода есть ряд очевидных минусов. Например, продюсер (сервис, отправляющий сообщение) может отправить данные только в виде response’а в ответ на запрос консьюмера (сервиса, получающего данные). Допустим, консьюмер отправляет POST – запрос, и продюсер отвечает на него. В это время консьюмер по каким-то причинам не может принять полученный ответ. Что будет с данными? Они будут потеряны. Консьюмеру снова придётся отправлять запрос и надеяться, что данные, которые он хотел получить, за это время не изменились, и продюсер всё ещё готов принять request.
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Apache Zookeeper – это централизованная служба для поддержки информации о конфигурации, обеспечения синхронизации распределенных приложений. За счет своего API, Зукипер берет на себя координацию распределенных сервисов, позволяя разработчику сосредоточиться на логике своего приложения.
                    Zoo стал стандартом де-факто для отслеживания состояния распределенных данных, синхронизации приложений и координации всего кластерастатического контекста.
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Зукипер информирует каждого брокера Kafka о текущем состоянии кластера. Благодаря этого каждому клиенту Kafka (издателю/подписчику) нужно всего лишь подключиться к какому-либо брокеру, а обновление метаданных у него произойдет автоматически
                </Paragraph>
                <Paragraph style={{fontSize: 20}}>
                    Таким образом, Зукипер нужен Кафке для обеспечения надежной согласованности состояния кластера
                </Paragraph>
            </Typography>)
    }
}